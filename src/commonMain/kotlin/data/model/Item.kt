package data.model

import character.Buff
import character.Stats
import data.Constants
import kotlinx.serialization.*
import kotlinx.serialization.json.Json
import kotlinx.serialization.modules.SerializersModule
import kotlin.js.JsExport

@JsExport
@Serializable
@Polymorphic
abstract class Item {
    // Flag for ItemGen - all generated Items will have this set to true
    // If an item is manually edited, set this to false to prevent future ItemGen runs from overwriting
    abstract var isAutoGenerated: Boolean

    // Item attributes
    abstract var id: Int
    abstract var name: String
    abstract var itemLevel: Int
    abstract var quality: Int
    abstract var icon: String
    abstract var itemSet: ItemSet?

    abstract var inventorySlot: Int
    var equippedSlot: String = ""

    // TODO: Validate itemSubclass is indeed a subclass of the itemClass
    abstract var itemClass: Constants.ItemClass?
    abstract var itemSubclass: Constants.ItemSubclass?

    // TODO: This assumes physical damage types for items
    // TODO: Multiple damage types
    abstract var minDmg: Double
    abstract var maxDmg: Double
    abstract var speed: Double

    // Stats
    abstract var stats: Stats

    // Sockets
    abstract var sockets: Array<Socket>
    abstract var socketBonus: SocketBonus?

    open fun itemSerializersModule() = SerializersModule {}

    open val socketBonusActive: Boolean
        get() {
            return sockets.all {
                it.matches()
            }
        }

    // Granted buffs and effects
    open val buffs: List<Buff> by lazy { listOf() }

    var enchant: Buff? = null
    var temporaryEnhancement: Buff? = null

    // Helpers
    open val avgDmg: Double
        get() { return (minDmg + maxDmg) / 2.0 }
    open val dps: Double
        get() { return avgDmg / speed }
    val uniqueName: String
        get() { return name + equippedSlot }

    fun clone(): Item {
        val s = Json { serializersModule = itemSerializersModule() }
        return s.decodeFromString(s.encodeToString(this))
    }
}
